module: PersistentVector
synopsis: 
author: 
copyright: 

//define constant EMPTY-NODE = make(<vector>, size: 32);


//define constant EMPTY-PVector :: <PVector> = make(<PVector>, count: 0, shift: 5, tail: make(<vector>), root-node: EMPTY-NODE);
define constant EMPTY-NODE :: <node> = make(<node>);

define class <node> (<object>)
  constant slot array :: <vector> = make(<vector>, size: 32), init-keyword:  array:;
end class <node>;

/*
define class <PVector>(<sequence>)
  constant slot element-count :: <integer>, required-init-keyword: count:;
  // ( depth-level + 1 ) * 5 = shift 
  constant slot shift :: <integer>, required-init-keyword: shift:;
  constant slot tail :: <vector>,  required-init-keyword: tail:;
  constant slot node :: <node>, required-init-keyword: root-node:;
  constant slot tailoff :: <integer> = element-count - size(tail);
end class <PVector>;
*/


define function main(name, arguments)
  puts("Hello, world!\n");
  format-out("%=\n", make(<vector>, size: 32));
  format-out("%=\n", EMPTY-NODE);
  exit-application(0);
end function main;

// Invoke our main() function.
main(application-name(), application-arguments());
